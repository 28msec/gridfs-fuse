# Before execute, please check if the following variables are set correctly in the first lines of the script:
# - PPA_MAINTAINER: master of ppa generation, can be passed via -D cmake option
# - PPA_NAME: name of ppa acount, can be passed via -D cmake option
# - PPA_REVISION: Debian revision number of the generated package, can be chaged via -D cmake option
# - PPA_HOMEPAGE: homepage set in generated package
# - PPA_DISTROS: ubuntu distributions for which a package is generated and uploaded

IF (NOT PPA_NAME)
  SET(PPA_NAME "gridfs")
ENDIF()
IF (NOT PPA_REVISION)
  SET(PPA_REVISION "7")
ENDIF()

SET(PPA_HOMEPAGE "http://www.28msec.com/")
SET(PPA_DISTROS "precise")
SET(PPA_VERSION "@GRIDFS_MAJOR_VERSION@.@GRIDFS_MINOR_VERSION@.@GRIDFS_PATCH_VERSION@")

SET(PPA_DEPENDENCIES "libmongo-cxx-driver-dev, debhelper, cmake, libfuse-dev, libboost-system-dev, libmemcached-dev")
SET(PPA_HOST "ppa:28msec/utils")
EXECUTE_PROCESS(COMMAND date -R OUTPUT_VARIABLE PPA_DATE_TIME)

# compute PPA_MAINTAINER by reading bzr whoami
EXECUTE_PROCESS(
  COMMAND bzr whoami
  OUTPUT_VARIABLE PPA_MAINTAINER
  OUTPUT_STRIP_TRAILING_WHITESPACE
  RESULT_VARIABLE RETURN_CODE)

IF (NOT RETURN_CODE EQUAL 0)
  MESSAGE(FATAL_ERROR "bzr whoami failed")
ENDIF (NOT RETURN_CODE EQUAL 0)

SET(PPA_DIR "@CMAKE_CURRENT_BINARY_DIR@/ppaingGridFS")
SET(PPA_SOURCE_DIR "${PPA_DIR}/${PPA_NAME}-${PPA_VERSION}")
SET(PPA_DEBIAN_DIR "${PPA_SOURCE_DIR}/debian")
SET(PPA_DEBIAN_TEMPL_DIR "@CMAKE_CURRENT_SOURCE_DIR@/debianGridFS")

FILE(REMOVE_RECURSE ${PPA_DIR})
FILE(MAKE_DIRECTORY ${PPA_SOURCE_DIR})

MESSAGE(STATUS "Preparing Sausalito sources for PPA.")
FILE(COPY @CMAKE_SOURCE_DIR@/.
  DESTINATION ${PPA_SOURCE_DIR}
  PATTERN "build" EXCLUDE
  PATTERN "*~" EXCLUDE
  PATTERN "*.swp" EXCLUDE
  PATTERN ".bzr" EXCLUDE
)

EXECUTE_PROCESS(
  COMMAND tar czf ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz  ${PPA_NAME}-${PPA_VERSION}
  WORKING_DIRECTORY ${PPA_DIR})

FOREACH(PPA_DISTRO ${PPA_DISTROS})
  EXECUTE_PROCESS(
    COMMAND cp ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz ${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}${PPA_REVISION}.orig.tar.gz
    WORKING_DIRECTORY ${PPA_DIR})

  MESSAGE(STATUS "Creating configration files for ${PPA_DISTRO}.")
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/changelog.in "${PPA_DEBIAN_DIR}/changelog" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/copyright.in "${PPA_DEBIAN_DIR}/copyright" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/control.in "${PPA_DEBIAN_DIR}/control" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/rules.in "${PPA_DEBIAN_DIR}/rules" @ONLY)

  FILE(WRITE ${PPA_DEBIAN_DIR}/compat "7")
  FILE(WRITE ${PPA_DEBIAN_DIR}/source/format "3.0 (quilt)")

  MESSAGE(STATUS "Debian source package generation for ${PPA_DISTRO}.")
  EXECUTE_PROCESS(
    COMMAND debuild -S
    RESULT_VARIABLE RETURN_CODE
    WORKING_DIRECTORY ${PPA_SOURCE_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "Debian package generation failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)

  SET(DEBIAN_CHANGES_FILE "${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}${PPA_REVISION}_source.changes")
  MESSAGE(STATUS "dputting ${DEBIAN_CHANGES_FILE}.")
  EXECUTE_PROCESS(
    COMMAND dput ${PPA_HOST} ${DEBIAN_CHANGES_FILE}
    RESULT_VARIABLE RETURN_CODE
    WORKING_DIRECTORY ${PPA_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "dputting failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)

ENDFOREACH()

