#
# Package configuration
#

SET(PPA_NAME "gridfs")
SET(PPA_HOMEPAGE "http://www.28msec.com/")
SET(PPA_DISTROS "precise")
SET(PPA_VERSION "2.6.1")
SET(PPA_UPSTREAM_VERSION "4")
SET(PPA_MAINTAINER "Federico Cavalieri <f@28.io>")
SET(PPA_BUILD_DEPENDENCIES "libmongo-cxx-driver-dev (=1:2.6.1~precise1), debhelper, cmake, libfuse-dev, libboost-system1.49-dev (=1.49.0twentyeight~precise1), libmemcached-dev")
SET(PPA_HOST "ppa:28msec/experimental")

EXECUTE_PROCESS(COMMAND date -R OUTPUT_VARIABLE PPA_DATE_TIME)
SET(PPA_DIR "@CMAKE_CURRENT_BINARY_DIR@/ppaing")
SET(PPA_SOURCE_DIR "${PPA_DIR}/${PPA_NAME}-${PPA_VERSION}")
SET(PPA_DEBIAN_DIR "${PPA_SOURCE_DIR}/debian")
SET(PPA_DEBIAN_TEMPL_DIR "@CMAKE_CURRENT_SOURCE_DIR@/debian")

FILE(REMOVE_RECURSE ${PPA_DIR})
FILE(MAKE_DIRECTORY ${PPA_SOURCE_DIR})

MESSAGE(STATUS "Preparing GridFS sources for PPA.")
FILE(COPY @CMAKE_SOURCE_DIR@/.
  DESTINATION ${PPA_SOURCE_DIR}
  PATTERN "build" EXCLUDE
  PATTERN "*~" EXCLUDE
  PATTERN "*.swp" EXCLUDE
  PATTERN ".bzr" EXCLUDE
)

EXECUTE_PROCESS(
  COMMAND tar czf ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz  ${PPA_NAME}-${PPA_VERSION}
  WORKING_DIRECTORY ${PPA_DIR})

FOREACH(PPA_DISTRO ${PPA_DISTROS})
  EXECUTE_PROCESS(
    COMMAND cp ${PPA_NAME}_${PPA_VERSION}.orig.tar.gz ${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}${PPA_UPSTREAM_VERSION}.orig.tar.gz
    WORKING_DIRECTORY ${PPA_DIR})

  MESSAGE(STATUS "Creating configration files for ${PPA_DISTRO}.")
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/changelog.in "${PPA_DEBIAN_DIR}/changelog" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/copyright.in "${PPA_DEBIAN_DIR}/copyright" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/control.in "${PPA_DEBIAN_DIR}/control" @ONLY)
  CONFIGURE_FILE(${PPA_DEBIAN_TEMPL_DIR}/rules.in "${PPA_DEBIAN_DIR}/rules" @ONLY)

  FILE(WRITE ${PPA_DEBIAN_DIR}/compat "9")
  FILE(WRITE ${PPA_DEBIAN_DIR}/source/format "3.0 (quilt)")

  MESSAGE(STATUS "Debian source package generation for ${PPA_DISTRO}.")
  EXECUTE_PROCESS(
    COMMAND debuild -S
    RESULT_VARIABLE RETURN_CODE
    WORKING_DIRECTORY ${PPA_SOURCE_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "Debian package generation failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)

  SET(DEBIAN_CHANGES_FILE "${PPA_NAME}_${PPA_VERSION}~${PPA_DISTRO}${PPA_UPSTREAM_VERSION}_source.changes")
  MESSAGE(STATUS "dputting ${DEBIAN_CHANGES_FILE}.")
  EXECUTE_PROCESS(
    COMMAND dput ${PPA_HOST} ${DEBIAN_CHANGES_FILE}
    RESULT_VARIABLE RETURN_CODE
    WORKING_DIRECTORY ${PPA_DIR})
  IF (NOT RETURN_CODE EQUAL 0)
    MESSAGE(FATAL_ERROR "dputting failed")
  ENDIF (NOT RETURN_CODE EQUAL 0)

ENDFOREACH()

